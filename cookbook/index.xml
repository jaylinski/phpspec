<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cookbooks on phpspec</title><link>http://www.phpspec.net/cookbook/</link><description>Recent content in Cookbooks on phpspec</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="http://www.phpspec.net/cookbook/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://www.phpspec.net/cookbook/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://www.phpspec.net/cookbook/configuration/</guid><description>Configuration Some things in phpspec can be configured in a phpspec.yml, .phpspec.yml, or phpspec.yml.dist file in the root of your project (the directory where you run the phpspec command).
You can use a different config file name and path with the --config option:
$ bin/phpspec run --config path/to/different-phpspec.yml You can use the .yaml extension in place of .yml if preferred.
You can also specify default values for config variables across all repositories by creating the file .</description></item><item><title/><link>http://www.phpspec.net/cookbook/console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://www.phpspec.net/cookbook/console/</guid><description>Running phpspec The phpspec console command uses Symfony&amp;rsquo;s console component. This means that it inherits the default Symfony console command and options.
phpspec has an additional global option to let you specify a config file other than phpspec.yml, .phpspec.yml, or `phpspec.yml.dist`:
$ bin/phpspec run --config path/to/different-phpspec.yml or:
$ bin/phpspec run -c path/to/different-phpspec.yml Read more about this in the Configuration Cookbook &amp;lt;/cookbook/configuration&amp;gt;
Also of note is that using the --no-interaction option means that no code generation will be done.</description></item><item><title/><link>http://www.phpspec.net/cookbook/construction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://www.phpspec.net/cookbook/construction/</guid><description>Object Construction In phpspec specs the object you are describing is not a separate variable but is $this. So instead of writing something like:
&amp;lt;?php namespace spec; use PhpSpec\ObjectBehavior; class MarkdownSpec extends ObjectBehavior { function it_converts_plain_text_to_html_paragraphs() { $markdown = new Markdown(); $markdown-&amp;gt;toHtml(&amp;#34;Hi, there&amp;#34;)-&amp;gt;shouldReturn(&amp;#34;&amp;lt;p&amp;gt;Hi, there&amp;lt;/p&amp;gt;&amp;#34;); } } as you might with other tools, you write:
&amp;lt;?php namespace spec; use PhpSpec\ObjectBehavior; class MarkdownSpec extends ObjectBehavior { function it_converts_plain_text_to_html_paragraphs() { $this-&amp;gt;toHtml(&amp;#34;Hi, there&amp;#34;)-&amp;gt;shouldReturn(&amp;#34;&amp;lt;p&amp;gt;Hi, there&amp;lt;/p&amp;gt;&amp;#34;); } } On consequence this means that you do not construct the object you are describing in the examples.</description></item><item><title/><link>http://www.phpspec.net/cookbook/extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://www.phpspec.net/cookbook/extensions/</guid><description>Extensions Extensions can add functionality to phpspec, such as, integration with a particular framework. See below for some example extensions.
Installation Individual extensions will have their own documentation that you can follow. Usually you can install an extension by adding it to your composer.json file and updating your vendors.
Configuration You will need to tell phpspec that you want to use the extension. You can do this by adding it to the config file:</description></item><item><title/><link>http://www.phpspec.net/cookbook/matchers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://www.phpspec.net/cookbook/matchers/</guid><description>Matchers You use matchers in phpspec to describe how an object should behave. They are like assertions in xUnit but with a focus on specifying behaviour instead of verifying output. You use the matchers prefixed by should or shouldNot as appropriate.
phpspec has 14 built-in matchers, described in more detail here. Many of these matchers have aliases which you can use to make your specifications easy to read.
Custom matchers classes can be registered in configuration&amp;lt;cookbook/configuration&amp;gt;.</description></item><item><title/><link>http://www.phpspec.net/cookbook/templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://www.phpspec.net/cookbook/templates/</guid><description>Templates phpspec can generate code snippets that will save you time when specifying classes. The default templates will be suitable for many use cases.
However in some cases, it&amp;rsquo;ll be useful to customize those templates by providing ones that suit your project requirements. For example, you may need to add licence information in a docblock to every class file. Instead of doing this manually you can modify the template so it is already in the generated file.</description></item><item><title/><link>http://www.phpspec.net/cookbook/wrapped-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://www.phpspec.net/cookbook/wrapped-objects/</guid><description>Working with Wrapped Objects phpspec wraps some of the objects used in specs. For example $this is the object you are describing wrapped in a phpspec object. This is how you can call methods on $this and then call matchers on the returned values.
Most of the time this is not something you need to worry about but sometimes it can be an issue.
If you ever need to get the actual object then you can by calling $this-&amp;gt;getWrappedObject().</description></item></channel></rss>